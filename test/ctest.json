{
   "4-5" : {
      "bin" : "src/4-5",
      "expected" : "Write a calculator program, add access to Math library functions, sin, exp and pow\nlhs 2, rhs 10, op ^\nsine of 1024 is -0.158533\ncosine of 0 is 0.000000\nlhs 1, rhs 3, op -\nstk_dump:\n43\n-2\n",
      "name" : "src/4-5",
		"args" : "< data/4-5"

   },

   "1-22" : {
      "bin" : "src/1-22",
      "expected" : "fold long input lines into two or more shorter lines with max length of 80 chars\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij\n1234567890abcdefghij1234567890abcdefghij\t\t\nshort\tline\n\nblank\tline\twas\tbefore\t\t\nbreak\tlines\tat\tsomewhere\tsomewhere\tsomewhere\tsomewhere\tsomewhere\taround\there\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij\n1234567890abcdefghij1234567890abcdefghij\t\t1234567890abcdefghij1234567890abcdefgh\nij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefgh\nij\t\t1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdef\nghij1234567890abcdefghij1234567890abcdefghij\t\t1234567890abcdefghij1234567890abcd\nefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcd\nefghij\t\t1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890ab\ncdefghij1234567890abcdefghij1234567890abcdefghij\t\t1234567890abcdefghij1234567890\nabcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890\nabcdefghij\t\t1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij12345678\n90abcdefghij1234567890abcdefghij1234567890abcdefghij\t\t1234567890abcdefghij123456\n7890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij123456\n7890abcdefghij\t\t1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234\n567890abcdefghij1234567890abcdefghij1234567890abcdefghij\t\t1234567890abcdefghij12\n34567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij12\n34567890abcdefghij\t\t1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij\t\t1234567890abcdefgh\nij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefgh\nij1234567890abcdefghij\t\t\n",
      "name" : "src/1-22",
      "args" : " < data/1-20"
   },
   "2-6" : {
      "bin" : "src/2-6",
      "expected" : "Write setbits(int x,va_args....) that sets each bit flag pass in a varargs style\nbit a set, 1\nbit b set, 2\nbit c set, 4\nbit d set, 8\nbit a and b set, 3\nbit a and c set, 5\nbit a and d set, 9\nbit a, b, c set, 7\n",
      "name" : "src/2-6"
   },
   "2-3" : {
      "bin" : "src/2-3",
      "expected" : "Write htoi which converts a char * of hex digits into an int number\nhtoi 0x2f34b = 193355\nhtoi 0x1234567 = 19088743\nhtoi 0x2 = 2\nhtoi 0x2a = 42\nhtoi 0x2A = 42\nhtoi 0X2A = 42\n",
      "name" : "src/2-3"
   },
   "4-6" : [
		{
			"bin" : "src/4-6",
			"expected" : "Write a calculator program. Add commands for handling variables.   Add a variable for the most recently printed value.\nlhs 23, rhs 12, op +\nTop element is 35.000000\nlhs 1, rhs 35, op -\nstk_dump:\n-34\n",
			"name" : "src/4-6",
			"args" : "< data/4-6"
		},
		{
			"bin" : "src/4-6",
			"expected" : "Write a calculator program. Add commands for handling variables.   Add a variable for the most recently printed value.\nlhs 23, rhs 12, op +\nlhs 5, rhs 4, op +\nlhs 9, rhs 35, op -\nTop element is -26.000000\nstk_dump:\n-26\n9\n35\n",
			"name" : "src/4-6",
			"args" : "< data/4-6-set-get"
		}
	],




   "5-13" : {
      "bin" : "src/5-13",
      "expected" : "Write tail(int n) to print last n lines...also how about allowing for tail -f ?",
      "name" : "src/5-13"
   },
   "2-1" : {
      "bin" : "src/2-1",
      "expected" : "Write a program to print out ranges of char, short, int, long vars (both signed and unsigned)\nunsigned char range is 0 to 255\nunsigned short range is 0 to 65535\n",
      "name" : "src/2-1"
   },
   "1-21" : {
      "bin" : "src/1-21",
      "expected" : "entab - replace N spaces with tabs\none space\ntwo  spaces\nthree\tspaces\nfour\t spaces\nfive\t  spaces\nsix\t\tspaces\n",
      "name" : "src/1-21",
      "args" : "< data/1-21"
   },
   "1-23" : {
      "bin" : "src/1-23",
      "expected" : "Remove all /* */ comments from a source file\n\n\nline before a c++ comment\n\n\n\n\nline after a c++ comment\n",
      "name" : "src/1-23",
      "args" : " data/1-23"
   },
   "5-3" : {
      "bin" : "src/5-3",
      "expected" : "Write a pointer based version of strcat(dest,src)\nconcatenate b to end of a = ab\nconcatenate str2 to end of ab = abstr2\nconcatenate str2 to end of str3 = str3str2",
      "name" : "src/5-3"
   },
   "4-3" : {
      "expected" : "Write a calculator program.\nlhs 34, rhs 12, op +\nlhs 2, rhs 46, op -\nstk_dump:\n-44\n",
      "bin" : "src/4-3",
      "args" : " < data/4-3",
      "name" : "src/4-3"
   },
   "5-9" : [
		{
			"bin" : "src/5-9",
			"expected" : "Rewrite day_of_year and month_day with pointers instead of indexing\norig month_day of 1984 365 is 1984-12-30\n",
			"name" : "src/5-9",
			"args" : "orig_month_day 1984 365"
		},
		{
			"bin" : "src/5-9",
			"expected" : "Rewrite day_of_year and month_day with pointers instead of indexing\nmonth_day of 1984 365 is 1984-12-30\n",
			"name" : "src/5-9",
			"args" : "month_day 1984 365"
		},
		{
			"bin" : "src/5-9",
			"expected" : "Rewrite day_of_year and month_day with pointers instead of indexing\norig day_of_year 1984-12-02 is 337\n",
			"name" : "src/5-9",
			"args" : "orig_day_of_year 1984 12 2"
		},
		{
			"bin" : "src/5-9",
			"expected" : "Rewrite day_of_year and month_day with pointers instead of indexing\nday_of_year 1984-12-02 is 337\n",
			"name" : "src/5-9",
			"args" : "day_of_year 1984 12 2"
		}
	],
   "5-7" : {
      "bin" : "src/5-7",
      "expected" : "Rewrite readlines() to store lines provided by main() rather than calling alloc. Benchmark the difference..which is better?\nRead 28 lines",
      "name" : "src/5-7",
		"args" : "< data/1-22-result"
   },
   "4-2" : {
      "bin" : "src/4-2",
      "expected" : "Write an atof function that handles scientific notation\nstarrt 1e1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1e1 parts +1.0+1.000000000\nlocal_atof(1e1) = 1.000000\n\n\n\nstarrt 1e12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1e12 parts +1.0+12.000000000\nlocal_atof(1e12) = 12.000000\n\n\n\nstarrt 1e0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1e0 parts +1.0+0.000000000\nlocal_atof(1e0) = 0.000000\n\n\n\nstarrt 1E1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1E1 parts +1.0+1.000000000\nlocal_atof(1E1) = 1.000000\n\n\n\nstarrt 1E12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1E12 parts +1.0+12.000000000\nlocal_atof(1E12) = 12.000000\n\n\n\nstarrt 1E0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1E0 parts +1.0+0.000000000\nlocal_atof(1E0) = 0.000000\n\n\n\nstarrt 1-e1\nparse error at character e, position 3, string 1-e1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1-e1 parts +1.0-1.000000000\nlocal_atof(1-e1) = 1.000000\n\n\n\nstarrt 1-e12\nparse error at character e, position 3, string 1-e12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n1-e12 parts +1.0-0.000000000\nlocal_atof(1-e12) = 0.000000\n\n\n\nstarrt 1-e0\nparse error at character e, position 3, string 1-e0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n1-e0 parts +1.0-1.000000000\nlocal_atof(1-e0) = 1.000000\n\n\n\nstarrt 1+e1\nparse error at character e, position 3, string 1+e1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1+e1 parts +1.0+1.000000000\nlocal_atof(1+e1) = 1.000000\n\n\n\nstarrt 1+e12\nparse error at character e, position 3, string 1+e12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1+e12 parts +1.0+12.000000000\nlocal_atof(1+e12) = 12.000000\n\n\n\nstarrt 1+e0\nparse error at character e, position 3, string 1+e0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1+e0 parts +1.0+0.000000000\nlocal_atof(1+e0) = 0.000000\n\n\n\nstarrt 1-E1\nparse error at character E, position 3, string 1-E1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1-E1 parts +1.0-1.000000000\nlocal_atof(1-E1) = 1.000000\n\n\n\nstarrt 1-E12\nparse error at character E, position 3, string 1-E12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n1-E12 parts +1.0-0.000000000\nlocal_atof(1-E12) = 0.000000\n\n\n\nstarrt 1-E0\nparse error at character E, position 3, string 1-E0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n1-E0 parts +1.0-1.000000000\nlocal_atof(1-E0) = 1.000000\n\n\n\nstarrt 1+E1\nparse error at character E, position 3, string 1+E1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1+E1 parts +1.0+1.000000000\nlocal_atof(1+E1) = 1.000000\n\n\n\nstarrt 1+E12\nparse error at character E, position 3, string 1+E12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1+E12 parts +1.0+12.000000000\nlocal_atof(1+E12) = 12.000000\n\n\n\nstarrt 1+E0\nparse error at character E, position 3, string 1+E0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1+E0 parts +1.0+0.000000000\nlocal_atof(1+E0) = 0.000000\n\n\n\nstarrt 12e1\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n12e1 parts +12.0+1.000000000\nlocal_atof(12e1) = 12.000000\n\n\n\nstarrt 12e12\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n12e12 parts +12.0+12.000000000\nlocal_atof(12e12) = 144.000000\n\n\n\nstarrt 12e0\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n12e0 parts +12.0+0.000000000\nlocal_atof(12e0) = 0.000000\n\n\n\nstarrt 12E1\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n12E1 parts +12.0+1.000000000\nlocal_atof(12E1) = 12.000000\n\n\n\nstarrt 12E12\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n12E12 parts +12.0+12.000000000\nlocal_atof(12E12) = 144.000000\n\n\n\nstarrt 12E0\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n12E0 parts +12.0+0.000000000\nlocal_atof(12E0) = 0.000000\n\n\n\nstarrt 12-e1\nparse error at character e, position 4, string 12-e1\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n12-e1 parts +12.0-1.000000000\nlocal_atof(12-e1) = 12.000000\n\n\n\nstarrt 12-e12\nparse error at character e, position 4, string 12-e12\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n12-e12 parts +12.0-0.000000000\nlocal_atof(12-e12) = 0.000000\n\n\n\nstarrt 12-e0\nparse error at character e, position 4, string 12-e0\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n12-e0 parts +12.0-1.000000000\nlocal_atof(12-e0) = 12.000000\n\n\n\nstarrt 12+e1\nparse error at character e, position 4, string 12+e1\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n12+e1 parts +12.0+1.000000000\nlocal_atof(12+e1) = 12.000000\n\n\n\nstarrt 12+e12\nparse error at character e, position 4, string 12+e12\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n12+e12 parts +12.0+12.000000000\nlocal_atof(12+e12) = 144.000000\n\n\n\nstarrt 12+e0\nparse error at character e, position 4, string 12+e0\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n12+e0 parts +12.0+0.000000000\nlocal_atof(12+e0) = 0.000000\n\n\n\nstarrt 12-E1\nparse error at character E, position 4, string 12-E1\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n12-E1 parts +12.0-1.000000000\nlocal_atof(12-E1) = 12.000000\n\n\n\nstarrt 12-E12\nparse error at character E, position 4, string 12-E12\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n12-E12 parts +12.0-0.000000000\nlocal_atof(12-E12) = 0.000000\n\n\n\nstarrt 12-E0\nparse error at character E, position 4, string 12-E0\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n12-E0 parts +12.0-1.000000000\nlocal_atof(12-E0) = 12.000000\n\n\n\nstarrt 12+E1\nparse error at character E, position 4, string 12+E1\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n12+E1 parts +12.0+1.000000000\nlocal_atof(12+E1) = 12.000000\n\n\n\nstarrt 12+E12\nparse error at character E, position 4, string 12+E12\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n12+E12 parts +12.0+12.000000000\nlocal_atof(12+E12) = 144.000000\n\n\n\nstarrt 12+E0\nparse error at character E, position 4, string 12+E0\nbuilding sig.digits[1] = 2, sum 2\nbuilding sig.digits[0] = 1, sum 12\nsig final 12\nfrac final 0\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n12+E0 parts +12.0+0.000000000\nlocal_atof(12+E0) = 0.000000\n\n\n\nstarrt 1.2e1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1.2e1 parts +1.2+1.000000000\nlocal_atof(1.2e1) = 1.000000\n\n\n\nstarrt 1.2e12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1.2e12 parts +1.2+12.000000000\nlocal_atof(1.2e12) = 12.000000\n\n\n\nstarrt 1.2e0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1.2e0 parts +1.2+0.000000000\nlocal_atof(1.2e0) = 0.000000\n\n\n\nstarrt 1.2E1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1.2E1 parts +1.2+1.000000000\nlocal_atof(1.2E1) = 1.000000\n\n\n\nstarrt 1.2E12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1.2E12 parts +1.2+12.000000000\nlocal_atof(1.2E12) = 12.000000\n\n\n\nstarrt 1.2E0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1.2E0 parts +1.2+0.000000000\nlocal_atof(1.2E0) = 0.000000\n\n\n\nstarrt 1.2-e1\nparse error at character e, position 5, string 1.2-e1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1.2-e1 parts +1.2-1.000000000\nlocal_atof(1.2-e1) = 1.000000\n\n\n\nstarrt 1.2-e12\nparse error at character e, position 5, string 1.2-e12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n1.2-e12 parts +1.2-0.000000000\nlocal_atof(1.2-e12) = 0.000000\n\n\n\nstarrt 1.2-e0\nparse error at character e, position 5, string 1.2-e0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n1.2-e0 parts +1.2-1.000000000\nlocal_atof(1.2-e0) = 1.000000\n\n\n\nstarrt 1.2+e1\nparse error at character e, position 5, string 1.2+e1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1.2+e1 parts +1.2+1.000000000\nlocal_atof(1.2+e1) = 1.000000\n\n\n\nstarrt 1.2+e12\nparse error at character e, position 5, string 1.2+e12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1.2+e12 parts +1.2+12.000000000\nlocal_atof(1.2+e12) = 12.000000\n\n\n\nstarrt 1.2+e0\nparse error at character e, position 5, string 1.2+e0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1.2+e0 parts +1.2+0.000000000\nlocal_atof(1.2+e0) = 0.000000\n\n\n\nstarrt 1.2-E1\nparse error at character E, position 5, string 1.2-E1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1.2-E1 parts +1.2-1.000000000\nlocal_atof(1.2-E1) = 1.000000\n\n\n\nstarrt 1.2-E12\nparse error at character E, position 5, string 1.2-E12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n1.2-E12 parts +1.2-0.000000000\nlocal_atof(1.2-E12) = 0.000000\n\n\n\nstarrt 1.2-E0\nparse error at character E, position 5, string 1.2-E0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n1.2-E0 parts +1.2-1.000000000\nlocal_atof(1.2-E0) = 1.000000\n\n\n\nstarrt 1.2+E1\nparse error at character E, position 5, string 1.2+E1\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n1.2+E1 parts +1.2+1.000000000\nlocal_atof(1.2+E1) = 1.000000\n\n\n\nstarrt 1.2+E12\nparse error at character E, position 5, string 1.2+E12\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n1.2+E12 parts +1.2+12.000000000\nlocal_atof(1.2+E12) = 12.000000\n\n\n\nstarrt 1.2+E0\nparse error at character E, position 5, string 1.2+E0\nbuilding sig.digits[0] = 1, sum 1\nsig final 1\nbuilding frac.digits[0] = 2, sum 2\nfrac final 2\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n1.2+E0 parts +1.2+0.000000000\nlocal_atof(1.2+E0) = 0.000000\n\n\n\nstarrt .1e1\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.1e1 parts +0.1+1.000000000\nlocal_atof(.1e1) = 0.000000\n\n\n\nstarrt .1e12\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.1e12 parts +0.1+12.000000000\nlocal_atof(.1e12) = 0.000000\n\n\n\nstarrt .1e0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.1e0 parts +0.1+0.000000000\nlocal_atof(.1e0) = 0.000000\n\n\n\nstarrt .1E1\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.1E1 parts +0.1+1.000000000\nlocal_atof(.1E1) = 0.000000\n\n\n\nstarrt .1E12\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.1E12 parts +0.1+12.000000000\nlocal_atof(.1E12) = 0.000000\n\n\n\nstarrt .1E0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.1E0 parts +0.1+0.000000000\nlocal_atof(.1E0) = 0.000000\n\n\n\nstarrt .1-e1\nparse error at character e, position 4, string .1-e1\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.1-e1 parts +0.1-1.000000000\nlocal_atof(.1-e1) = 0.000000\n\n\n\nstarrt .1-e12\nparse error at character e, position 4, string .1-e12\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n.1-e12 parts +0.1-0.000000000\nlocal_atof(.1-e12) = 0.000000\n\n\n\nstarrt .1-e0\nparse error at character e, position 4, string .1-e0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n.1-e0 parts +0.1-1.000000000\nlocal_atof(.1-e0) = 0.000000\n\n\n\nstarrt .1+e1\nparse error at character e, position 4, string .1+e1\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.1+e1 parts +0.1+1.000000000\nlocal_atof(.1+e1) = 0.000000\n\n\n\nstarrt .1+e12\nparse error at character e, position 4, string .1+e12\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.1+e12 parts +0.1+12.000000000\nlocal_atof(.1+e12) = 0.000000\n\n\n\nstarrt .1+e0\nparse error at character e, position 4, string .1+e0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.1+e0 parts +0.1+0.000000000\nlocal_atof(.1+e0) = 0.000000\n\n\n\nstarrt .1-E1\nparse error at character E, position 4, string .1-E1\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.1-E1 parts +0.1-1.000000000\nlocal_atof(.1-E1) = 0.000000\n\n\n\nstarrt .1-E12\nparse error at character E, position 4, string .1-E12\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n.1-E12 parts +0.1-0.000000000\nlocal_atof(.1-E12) = 0.000000\n\n\n\nstarrt .1-E0\nparse error at character E, position 4, string .1-E0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n.1-E0 parts +0.1-1.000000000\nlocal_atof(.1-E0) = 0.000000\n\n\n\nstarrt .1+E1\nparse error at character E, position 4, string .1+E1\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.1+E1 parts +0.1+1.000000000\nlocal_atof(.1+E1) = 0.000000\n\n\n\nstarrt .1+E12\nparse error at character E, position 4, string .1+E12\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.1+E12 parts +0.1+12.000000000\nlocal_atof(.1+E12) = 0.000000\n\n\n\nstarrt .1+E0\nparse error at character E, position 4, string .1+E0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.1+E0 parts +0.1+0.000000000\nlocal_atof(.1+E0) = 0.000000\n\n\n\nstarrt .12e1\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.12e1 parts +0.12+1.000000000\nlocal_atof(.12e1) = 0.000000\n\n\n\nstarrt .12e12\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.12e12 parts +0.12+12.000000000\nlocal_atof(.12e12) = 0.000000\n\n\n\nstarrt .12e0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.12e0 parts +0.12+0.000000000\nlocal_atof(.12e0) = 0.000000\n\n\n\nstarrt .12E1\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.12E1 parts +0.12+1.000000000\nlocal_atof(.12E1) = 0.000000\n\n\n\nstarrt .12E12\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.12E12 parts +0.12+12.000000000\nlocal_atof(.12E12) = 0.000000\n\n\n\nstarrt .12E0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.12E0 parts +0.12+0.000000000\nlocal_atof(.12E0) = 0.000000\n\n\n\nstarrt .12-e1\nparse error at character e, position 5, string .12-e1\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.12-e1 parts +0.12-1.000000000\nlocal_atof(.12-e1) = 0.000000\n\n\n\nstarrt .12-e12\nparse error at character e, position 5, string .12-e12\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n.12-e12 parts +0.12-0.000000000\nlocal_atof(.12-e12) = 0.000000\n\n\n\nstarrt .12-e0\nparse error at character e, position 5, string .12-e0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n.12-e0 parts +0.12-1.000000000\nlocal_atof(.12-e0) = 0.000000\n\n\n\nstarrt .12+e1\nparse error at character e, position 5, string .12+e1\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.12+e1 parts +0.12+1.000000000\nlocal_atof(.12+e1) = 0.000000\n\n\n\nstarrt .12+e12\nparse error at character e, position 5, string .12+e12\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.12+e12 parts +0.12+12.000000000\nlocal_atof(.12+e12) = 0.000000\n\n\n\nstarrt .12+e0\nparse error at character e, position 5, string .12+e0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.12+e0 parts +0.12+0.000000000\nlocal_atof(.12+e0) = 0.000000\n\n\n\nstarrt .12-E1\nparse error at character E, position 5, string .12-E1\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.12-E1 parts +0.12-1.000000000\nlocal_atof(.12-E1) = 0.000000\n\n\n\nstarrt .12-E12\nparse error at character E, position 5, string .12-E12\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n.12-E12 parts +0.12-0.000000000\nlocal_atof(.12-E12) = 0.000000\n\n\n\nstarrt .12-E0\nparse error at character E, position 5, string .12-E0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n.12-E0 parts +0.12-1.000000000\nlocal_atof(.12-E0) = 0.000000\n\n\n\nstarrt .12+E1\nparse error at character E, position 5, string .12+E1\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n.12+E1 parts +0.12+1.000000000\nlocal_atof(.12+E1) = 0.000000\n\n\n\nstarrt .12+E12\nparse error at character E, position 5, string .12+E12\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n.12+E12 parts +0.12+12.000000000\nlocal_atof(.12+E12) = 0.000000\n\n\n\nstarrt .12+E0\nparse error at character E, position 5, string .12+E0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n.12+E0 parts +0.12+0.000000000\nlocal_atof(.12+E0) = 0.000000\n\n\n\nstarrt 0.1e1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.1e1 parts +0.1+1.000000000\nlocal_atof(0.1e1) = 0.000000\n\n\n\nstarrt 0.1e12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.1e12 parts +0.1+12.000000000\nlocal_atof(0.1e12) = 0.000000\n\n\n\nstarrt 0.1e0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.1e0 parts +0.1+0.000000000\nlocal_atof(0.1e0) = 0.000000\n\n\n\nstarrt 0.1E1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.1E1 parts +0.1+1.000000000\nlocal_atof(0.1E1) = 0.000000\n\n\n\nstarrt 0.1E12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.1E12 parts +0.1+12.000000000\nlocal_atof(0.1E12) = 0.000000\n\n\n\nstarrt 0.1E0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.1E0 parts +0.1+0.000000000\nlocal_atof(0.1E0) = 0.000000\n\n\n\nstarrt 0.1-e1\nparse error at character e, position 5, string 0.1-e1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.1-e1 parts +0.1-1.000000000\nlocal_atof(0.1-e1) = 0.000000\n\n\n\nstarrt 0.1-e12\nparse error at character e, position 5, string 0.1-e12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n0.1-e12 parts +0.1-0.000000000\nlocal_atof(0.1-e12) = 0.000000\n\n\n\nstarrt 0.1-e0\nparse error at character e, position 5, string 0.1-e0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n0.1-e0 parts +0.1-1.000000000\nlocal_atof(0.1-e0) = 0.000000\n\n\n\nstarrt 0.1+e1\nparse error at character e, position 5, string 0.1+e1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.1+e1 parts +0.1+1.000000000\nlocal_atof(0.1+e1) = 0.000000\n\n\n\nstarrt 0.1+e12\nparse error at character e, position 5, string 0.1+e12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.1+e12 parts +0.1+12.000000000\nlocal_atof(0.1+e12) = 0.000000\n\n\n\nstarrt 0.1+e0\nparse error at character e, position 5, string 0.1+e0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.1+e0 parts +0.1+0.000000000\nlocal_atof(0.1+e0) = 0.000000\n\n\n\nstarrt 0.1-E1\nparse error at character E, position 5, string 0.1-E1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.1-E1 parts +0.1-1.000000000\nlocal_atof(0.1-E1) = 0.000000\n\n\n\nstarrt 0.1-E12\nparse error at character E, position 5, string 0.1-E12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n0.1-E12 parts +0.1-0.000000000\nlocal_atof(0.1-E12) = 0.000000\n\n\n\nstarrt 0.1-E0\nparse error at character E, position 5, string 0.1-E0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n0.1-E0 parts +0.1-1.000000000\nlocal_atof(0.1-E0) = 0.000000\n\n\n\nstarrt 0.1+E1\nparse error at character E, position 5, string 0.1+E1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.1+E1 parts +0.1+1.000000000\nlocal_atof(0.1+E1) = 0.000000\n\n\n\nstarrt 0.1+E12\nparse error at character E, position 5, string 0.1+E12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.1+E12 parts +0.1+12.000000000\nlocal_atof(0.1+E12) = 0.000000\n\n\n\nstarrt 0.1+E0\nparse error at character E, position 5, string 0.1+E0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[0] = 1, sum 1\nfrac final 1\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.1+E0 parts +0.1+0.000000000\nlocal_atof(0.1+E0) = 0.000000\n\n\n\nstarrt 0.12e1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.12e1 parts +0.12+1.000000000\nlocal_atof(0.12e1) = 0.000000\n\n\n\nstarrt 0.12e12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.12e12 parts +0.12+12.000000000\nlocal_atof(0.12e12) = 0.000000\n\n\n\nstarrt 0.12e0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.12e0 parts +0.12+0.000000000\nlocal_atof(0.12e0) = 0.000000\n\n\n\nstarrt 0.12E1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.12E1 parts +0.12+1.000000000\nlocal_atof(0.12E1) = 0.000000\n\n\n\nstarrt 0.12E12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.12E12 parts +0.12+12.000000000\nlocal_atof(0.12E12) = 0.000000\n\n\n\nstarrt 0.12E0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.12E0 parts +0.12+0.000000000\nlocal_atof(0.12E0) = 0.000000\n\n\n\nstarrt 0.12-e1\nparse error at character e, position 6, string 0.12-e1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.12-e1 parts +0.12-1.000000000\nlocal_atof(0.12-e1) = 0.000000\n\n\n\nstarrt 0.12-e12\nparse error at character e, position 6, string 0.12-e12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n0.12-e12 parts +0.12-0.000000000\nlocal_atof(0.12-e12) = 0.000000\n\n\n\nstarrt 0.12-e0\nparse error at character e, position 6, string 0.12-e0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n0.12-e0 parts +0.12-1.000000000\nlocal_atof(0.12-e0) = 0.000000\n\n\n\nstarrt 0.12+e1\nparse error at character e, position 6, string 0.12+e1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.12+e1 parts +0.12+1.000000000\nlocal_atof(0.12+e1) = 0.000000\n\n\n\nstarrt 0.12+e12\nparse error at character e, position 6, string 0.12+e12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.12+e12 parts +0.12+12.000000000\nlocal_atof(0.12+e12) = 0.000000\n\n\n\nstarrt 0.12+e0\nparse error at character e, position 6, string 0.12+e0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.12+e0 parts +0.12+0.000000000\nlocal_atof(0.12+e0) = 0.000000\n\n\n\nstarrt 0.12-E1\nparse error at character E, position 6, string 0.12-E1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.12-E1 parts +0.12-1.000000000\nlocal_atof(0.12-E1) = 0.000000\n\n\n\nstarrt 0.12-E12\nparse error at character E, position 6, string 0.12-E12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 0.000000000\n0.12-E12 parts +0.12-0.000000000\nlocal_atof(0.12-E12) = 0.000000\n\n\n\nstarrt 0.12-E0\nparse error at character E, position 6, string 0.12-E0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 1.000000000\n0.12-E0 parts +0.12-1.000000000\nlocal_atof(0.12-E0) = 0.000000\n\n\n\nstarrt 0.12+E1\nparse error at character E, position 6, string 0.12+E1\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 1, sum 1\nexp final 1.000000000\n0.12+E1 parts +0.12+1.000000000\nlocal_atof(0.12+E1) = 0.000000\n\n\n\nstarrt 0.12+E12\nparse error at character E, position 6, string 0.12+E12\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[1] = 2, sum 2\nbuilding exp.digits[0] = 1, sum 12\nexp final 12.000000000\n0.12+E12 parts +0.12+12.000000000\nlocal_atof(0.12+E12) = 0.000000\n\n\n\nstarrt 0.12+E0\nparse error at character E, position 6, string 0.12+E0\nbuilding sig.digits[0] = 0, sum 0\nsig final 0\nbuilding frac.digits[1] = 2, sum 2\nbuilding frac.digits[0] = 1, sum 12\nfrac final 12\nbuilding exp.digits[0] = 0, sum 0\nexp final 0.000000000\n0.12+E0 parts +0.12+0.000000000\nlocal_atof(0.12+E0) = 0.000000\n\n\n\n",
      "name" : "src/4-2"
   },
   "1-18" : {
      "bin" : "src/1-18",
      "expected" : "Remove trailing whitespace (except newline) from input lines and delete blank lines\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij\nshort line\nblank line was before\nbreak lines at somewhere somewhere somewhere somewhere somewhere around here\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij\n",
      "args" : " < data/1-16",
      "name" : "src/1-18"
   },
   "4-7" : {
      "bin" : "src/4-7",
      "expected" : "Write a calculator program, write ungets(s) that pushes back an entire string.  Should ungets know about buf and bufp or should it just use ungetch?",
      "name" : "src/4-7"
   },
   "1-20" : {
      "bin" : "src/1-20",
      "expected" : "detab - replace tabs with N spaces\nReplaces tabs with 3 spaces\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      \nshort   line\n\nblank   line   was   before      \nbreak   lines   at   somewhere   somewhere   somewhere   somewhere   somewhere   around   here\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij      \n",
      "args" : " < data/1-20 ",
      "name" : "src/1-20"
   },
   "4-1" : {
      "regex_expected" : "/^\\s*Write a strrindex\\(s,t\\) function that return the last occurrence of t in s or -1 if not found \\(this can be compared to rindex\\?\\)\\s*Last index of t in This is a string we will test the last index for. is 37\\s*Last index of z in This is a string we will test the last index for. is -1\\s*Last index of r in This is a string we will test the last index for. is 47\\s*Last index of r in r is 0\\s*Last index of z in  is -1\\s*$/",
      "bin" : "src/4-1",
      "name" : "src/4-1"
   },
   "8-3" : {
      "bin" : "src/8-3",
      "expected" : "Design and write _flushbuf(), fflush(), fclose()",
      "name" : "src/8-3"
   },
   "4-8" : {
      "bin" : "src/4-8",
      "expected" : "",
      "name" : "src/4-8"
   },
   "1-23-fread" : {
      "bin" : "src/1-23-fread",
      "expected" : "Remove all /* */ comments from a source file\n\n\nline before a c++ comment\n\n\n\n\nline after a c++ comment\n",
      "args" : "data/1-23",
      "name" : "src/1-23-fread"
   },
   "1-17" : {
      "bin" : "src/1-17",
      "expected" : "Break all input lines longer than atoi(<argv[1]>) characters\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghi\nj1234567890abcdefghij1234567890abcdefghij  \nshort line\n\nblank line was before  \nbreak lines at somewhere somewhere somewhere somewhere somewhere around here\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghi\nj1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdef\nghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcde\nfghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890ab\ncdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij123456789\n0abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij12345678\n90abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij12345\n67890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij12\n34567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1\n234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefgh\nij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcde\nfghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcd\nefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890a\nbcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  12345678\n90abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567\n890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234\n567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1\n234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij\n1234567890abcdefghij1234567890abcdefghij  \n",
      "name" : "src/1-17",
      "args" : " < data/1-16"
   },
   "8-6" : {
      "regex_expected" : "/^\\s*Rewrite calloc\\(n, size\\) using malloc\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   9\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   8\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   7\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   6\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   5\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   4\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   3\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   2\\s+test name asdf\\s+test ptr  0x[0-9A-Za-z]+\\s+test id   1\\s+test name asdf\\s*$/",
      "bin" : "src/8-6",
      "name" : "src/8-6"
   },
   "4-9" : {
      "bin" : "src/4-9",
      "expected" : "Write a calculator program, Our getch/ungetch doesn't handle pushing EOF back",
      "name" : "src/4-9"
   },
   "unicodes" : {
      "bin" : "src/unicodes",
      "rrexpected" : "This is char: \u00ce\u00a9 \nThis is char: \u00e2\u0084\u00a6 \nChars are equal: Yes\nThis is a long string: \u00e2\u0099\u00a0\u00e2\u0099\u00a3\u00e2\u0099\u00a5\u00e2\u0099\u00a6 \nThis is a long string: \u00e2\u0099\u00a0\u00e2\u0099\u00a3\u00e2\u0099\u00a5\u00e2\u0099\u00a6 \nLong strings are equal: Yes\n",
      "expected" : "This is char: \u00ce\u00a9 \nThis is char: \u00ce\u00a9 \nChars are equal: Yes\nThis is a long string: \u00e2\u0099\u00a0\u00e2\u0099\u00a3\u00e2\u0099\u00a5\u00e2\u0099\u00a6 \nThis is a long string: \u00e2\u0099\u00a0\u00e2\u0099\u00a3\u00e2\u0099\u00a5\u00e2\u0099\u00a6 \nLong strings are equal: Yes\n",

      "name" : "src/unicodes"
   },
   "3-2" : {
      "bin" : "src/3-2",
      "expected" : "from: This is a sentence with a literal newline -\n- and a literal -\t-.\nto  : This is a sentence with a literal newline -\\n- and a literal -\\t-.\nfrom: T\n\n\n\n\n\n\n\n\nhis is a sentence \t\t\t\twith a literal newline -\n- and a literal -\t-.\nto  : T\\n\\n\\n\\n\\n\\n\\n\\n\\nhis is a sentence \\t\\t\\t\\twith a literal newline -\\n- and a literal -\\t-.\n",
      "name" : "src/3-2"
   },
   "8-5" : {
      "bin" : "src/8-5",
      "regex_expected" : "/modify fsize to print all info contained in inode entries\nStat data.1-22-result:\\s*dev_t: [0-9]+\\s*ino_t: [0-9]+\\s*mode_t: [0-9]+\\s*nlink_t: [0-9]+\\s*uid_t: [0-9]+\\s*gid_t: [0-9]+\\s*dev_t: [0-9]+\\s*off_t: [0-9]+\\s*blksize_t: [0-9]+\\s*blkcnt_t: [0-9]+\\s*time_t: [0-9]+\\s*time_t: [0-9]+\\s*time_t: [0-9]+/",
      "args" : "data/1-22-result",
      "name" : "src/8-5"
   },
   "4-10" : {
      "bin" : "src/4-10",
      "expected" : "Write a calculator program, revise calc to use getline instead of getch",
      "name" : "src/4-10"
   },
   "2-4" : {
      "bin" : "src/2-4",
      "expected" : "Write a function, squeeze(char *  srcString,char * subString) that deletes all occurences of each char in subString in srcString\nOriginal string: Start with a longish string\nResult after squeeze with s: Start with a longih tring\nResult after squeeze with h: Start wit a longi tring\nResult after squeeze with e: Start wit a longi tring\n",
      "name" : "src/2-4"
   },
   "7-1" : {
      "bin" : "src/7-1",
      "expected" : "Write a program, like rcfile, that changes behavior based on name of argv[0]\n7-1\nwotevs",
      "name" : "src/7-1"
   },
   "6-1" : {
      "bin" : "src/6-1",
      "expected" : "Update getword to handle underscores, string constants, comments, preprocessor control lines\ngot word: abc\ngot word: a123\ngot word: 1\ngot word: 2\ngot word: 3\ngot word: abc\ngot word: def\ngot word: a\ngot word: b\ngot word: c\ngot word: bdef\ngot word: bdefghij\ngot word: k\ngot word: before_comment_1\ngot word: before_comment_2\ngot word: after_comment_1\ngot word: after_comment_2\ngot word: before\ngot word: after\n",
      "name" : "src/6-1",
		"args" : "< data/6-1"
   },
   "fdsa" : {
      "bin" : "src/fdsa",
      "expected" : "Write a program, like rcfile, that changes behavior based on name of argv[0]\nfdsa\nI must be fdsaing my mind\n",
      "name" : "src/fdsa"
   },
   "asdf" : {
      "bin" : "src/asdf",
      "expected" : "Write a program, like rcfile, that changes behavior based on name of argv[0]\nasdf\nDoing whatever asdf tells me to do\n",
      "name" : "src/asdf"
   },
   "5-4" : {
      "bin" : "src/5-4",
      "expected" : "Write strend (better called endsWith(str,substr)) that returns 1 if str ends with substr\nThis is a sentence endsWith ence? yes,  passed\nThis is a sentence endsWith wrong? no,  passed\nThis is a sentence endsWith sentence? yes,  passed\n endsWith .? no,  passed\n endsWith ? yes,  passed\n(null) endsWith (null)? no,  passed\na endsWith a? yes,  passed\n",
      "name" : "src/5-4"
   },
   "6-3" : {
      "bin" : "src/6-3",
      "expected" : "Write a cross-referencer that prints a list of all words in  a document and, for each word, a list of the line numbers of occurences of each word.  Have an ignore list of words like 'a', 'the, etc.\nadsff, count 1\nasdff, count 1\nasdfzxcvdsafd, count 1\ngfdsfdasdfa, count 1\nqewaaaar, count 2\nqewr, count 5\nqewvvvr, count 1\nrewq, count 1\n",
      "name" : "src/6-3",
      "args" : " data/6-2"
   },
   "6-5" : {
      "bin" : "src/6-5",
      "expected" : "Write a function, undef that removes entries from lookup table\nOriginal list of words\nkey: asdff, val: 1\nkey: adsff, val: 1\nkey: qewvvvr, val: 1\nkey: gfdsfdasdfa, val: 1\nkey: asdfzxcvdsafd, val: 1\nkey: qewr, val: 5\nkey: rewq, val: 1\nkey: qewaaaar, val: 2\nMost popular word(s) found\nqewr\nshould delete qewr\nList of words after removing most popular word(s)\nkey: asdff, val: 1\nkey: adsff, val: 1\nkey: qewvvvr, val: 1\nkey: gfdsfdasdfa, val: 1\nkey: asdfzxcvdsafd, val: 1\nkey: rewq, val: 1\nkey: qewaaaar, val: 2\n",
      "name" : "src/6-5",
		"args" : "data/6-2"
   },
   "3-3" : {
      "bin" : "src/3-3",
      "expected" : "Write an str2 = expand(str1) to expand shorthand notations of a-z, 0-9\npassed: test: This is a-z range, result: This is abcdefghijklmnopqrstuvwxyz range, expected: This is abcdefghijklmnopqrstuvwxyz range\npassed: test: This is 0-9 range, result: This is 0123456789 range, expected: This is 0123456789 range\npassed: test: This is a-z0-9 range, result: This is abcdefghijklmnopqrstuvwxyz0123456789 range, expected: This is abcdefghijklmnopqrstuvwxyz0123456789 range\npassed: test: This is 0-9a-z range, result: This is 0123456789abcdefghijklmnopqrstuvwxyz range, expected: This is 0123456789abcdefghijklmnopqrstuvwxyz range\npassed: test: 0-9a-z, result: 0123456789abcdefghijklmnopqrstuvwxyz, expected: 0123456789abcdefghijklmnopqrstuvwxyz\npassed: test: 0-3-5, result: 0123-5, expected: 0123-5\npassed: test: 0123-5, result: 012345, expected: 012345\npassed: test: 0-z, result: 0-z, expected: 0-z\npassed: test: A-z, result: A-z, expected: A-z\npassed: test: a-Z, result: a-Z, expected: a-Z\n",
      "name" : "src/3-3"
   },
   "8-7" : {
      "regex_expected" : "/Rewrite malloc and add bounds checking.\ngot allocation 0x[0-9A-Za-z]+\ngot var to use 0x[0-9A-Za-z]+\nSize allocated is 123\\? yes/",
      "bin" : "src/8-7",
      "name" : "src/8-7",
      "args" : "123"
   },
   "7-3" : {
      "bin" : "src/7-3",
      "regex_expected" : "/^Revise minprintf to handle more of the other facilities of printf\nThis is an int 10\nThis is an double 10.000000\nThis is a string 10\nThis is a literal % followed by a char [*] of % and a char 37\nThis is a long int 1234567891011121314\nThis is a long long int 1234567891011121314\nThis is a pointer not initialized [(]nil[)]\nThis is a pointer initialized 0x[0-9A-Za-z]+/",
      "name" : "src/7-3"
   },
   "1-24-stack" : {
      "regex_expected" : "/Write a program that checks for balance with parentheses, brackets, braces\nOut of balance at end of source, dumping what's left\nstack: [{], 0x[0-9A-Za-z]+\nstack: \u0000, 0x[0-9A-Za-z]+/",
      "bin" : "src/1-24-stack",
      "args" : "data/1-24",
      "name" : "src/1-24-stack"
   },
   "1-24" : {
      "bin" : "src/1-24",
      "expected" : "Write a program that checks for balance with parentheses, brackets, braces\nbrackets out of balance at line 14\n",
      "name" : "src/1-24",
      "args" : "data/1-24"
   },
   "8-4" : {
      "bin" : "src/8-4",
      "expected" : "fseek is identical to lseek, except that fseek takes a file pointer, not a file descriptor write fseek.",
      "name" : "src/8-4"
   },
   "8-1" : {
      "bin" : "src/8-1",
      "expected" : "Rewrite cat with read/write/open/close instead of standard library equivalents. Which is faster, my own cat or the real cat?\none space\ntwo  spaces\nthree   spaces\nfour    spaces\nfive     spaces\nsix      spaces\n",
      "name" : "src/8-1",
		"args" : "data/1-21"
   },
   "1-16" : {
      "bin" : "src/1-16",
      "expected" : "Print the length of arbitrarily long input lines and all the text in line\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  \nLength: 123\nshort line\nLength: 11\n\nLength: 1\nblank line was before  \nLength: 24\nbreak lines at somewhere somewhere somewhere somewhere somewhere around here\nLength: 77\n1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij  \nLength: 1465\n",
      "name" : "src/1-16",
      "args" : " < data/1-16"
   },
   "1-1" : {
      "bin" : "src/1-1",
      "expected" : "hello, world\r\n",
      "name" : "src/1-1"
   },
   "4-4" : [
		{
			"bin" : "src/4-4",
			"expected" : "Write a calculator program, add commands to print the top stack element without popping, duplicate the top element, and to swap the top two elements.  Add a command to clear the stack\nTop element is 23\nstk_dump:\n12\nTop element is 12\nlhs 12, rhs 23, op -\nstk_dump:\n-11\n",
			"name" : "src/4-4",
			"args" : "< data/4-4"
		},
		{
			"bin" : "src/4-4",
			"expected" : "Write a calculator program, add commands to print the top stack element without popping, duplicate the top element, and to swap the top two elements.  Add a command to clear the stack\nTop element is 23\nstk_dump:\n12\nTop element is 12\nlhs 12, rhs 23, op -\nlhs 1, rhs 5, op +\nlhs 95, rhs 6, op *\nstk_dump:\n45\n570\n",
			"name" : "src/4-4",
			"args" : "< data/4-4-w-clear"
		}
	],


   "1-4" : {
      "bin" : "src/1-4",
      "expected" : "Write Celsius to Farenheit\n100.00 C = 212.00 F",
      "name" : "src/1-4",
      "args" : " 100 "
   },
   "4-12" : {
      "bin" : "src/4-12",
      "expected" : "Adapt printd, writing a recursive itoa\nitoa(12345) = 12345, strlen 5\nitoa(1234) = 1234, strlen 4\nitoa(123) = 123, strlen 3\nitoa(12) = 12, strlen 2\nitoa(1) = 1, strlen 1\nitoa(1234567) = 1234567, strlen 7\n",
      "name" : "src/4-12"
   },
   "5-17" : {
      "bin" : "src/5-17",
      "expected" : "Write a sort() to sort lines, allow for an n arg that sorts by field number n",
      "name" : "src/5-17"
   },
   "6-3-w-hashtable" : {
      "bin" : "src/6-3-w-hashtable",
      "expected" : "Write a cross-referencer that prints a list of all words in  a document and, for each word, a list of the line numbers of occurences of each word.  Have an ignore list of words like 'a', 'the, etc.\nkey: asdff, val: 1\nkey: adsff, val: 1\nkey: qewvvvr, val: 1\nkey: gfdsfdasdfa, val: 1\nkey: asdfzxcvdsafd, val: 1\nkey: qewr, val: 5\nkey: rewq, val: 1\nkey: qewaaaar, val: 2\n",
      "name" : "src/6-3-w-hashtable",
		"args" : "data/6-2"
   },
   "1-3" : {
      "bin" : "src/1-3",
      "expected" : "123 C == 253.4000 F\n123 F == 50.5556 C",
      "args" : "123",
      "name" : "src/1-3"
   },
	
	"test_arraylist_str"  : {
		"bin" : "src/test_arraylist_str",
		"name" : "src/test_arraylist_str",
		"expected" : "list size: 5\nlist[0]: wowee blah blah\nlist[1]: zowee\nlist[2]: on\nlist[3]: the longest entry in the list\nlist[4]: t\n"
	}
}
